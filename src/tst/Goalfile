'use strict'; /* vim: set ft=javascript: */

if (new Set([ 'tst/generated/registers.h', 'tst/tst-rtld.S.o', 'tst/tst-rtld.out',
	      'tst/live.l', 'tst/tst-live-sig-mask-async-ut' ]).has (goal))
  return await this.invoke (`${goal}.g`);

if (new Set([ 'tst/tst-live.ld' ]).has (goal))
  return await this.invoke ('goal/m4.g');

if (goal.match (/^tst\/tst-live-exit-[^.]*.out$/)) return await this.invoke ('tst/tst-live-exit.out.g');

if (goal.match (/^tst\/tst-live-sig-hand-[^-.]*-ut$/)) return await this.invoke ('tst/tst-live-sig-hand-ut.g');

if (goal.match (/^tst\/tst-live-sig-hand-[^-.]*-ut.ld$/)) return await this.invoke ('goal/m4.g');

if (goal.match (/^tst\/tst-live-sig-hand-[^-.]*-ut.ld.m4$/))
  return await this.invoke ('tst/tst-live-sig-hand-ut.ld.m4.g');

if (goal.match (/^tst\/live-sig-hand-[^-.]*-ut.l$/)) return await this.invoke ('tst/live-sig-hand-ut.l.g');

if (goal.match (/^tst\/tst-live-entry-atomic-[^.]*$/)) return await this.invoke ('tst/tst-live-entry-atomic.g');

if (goal.match (/^tst\/tst-live-entry-[^.]*$/)) return await this.invoke ('tst/tst-live-entry.g');

if (goal.match (/^tst\/tst-live-[^.]*$/)) return await this.invoke ('tst/tst-live.g');

return false;
