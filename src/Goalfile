'use strict'; /* vim: set ft=javascript: */

if (env.base (goal) === 'Goalfile') return false;

const subs = [ 'lib', 'live', 'replay', 'ers', 'int' ];
if (await subs.reduce (async (a, s) =>
      await a || (goal.startsWith (`${s}/`) && await this.invoke (`${s}/Goalfile`) !== false), false))
  return;
if (goal === 'all') return await this.invoke (`${goal}.g`, { subs });

if (goal.match (/\bsyscall-dedicated\.[^.]*.m4$/))
  return await this.invoke (`${goal.match (/(.*)\bsyscall-dedicated\.[^.]*.m4$/)[1]}syscall-dedicated.m4.g`);

if (goal.match (/-offsets\.h$/)) return await this.invoke ('goal/offset.g');
if (goal.match (/-dedicated\.[^.]*$/)) return await this.invoke ('goal/m4.g');
if (new Set ([ 'public.h', 'public.h.in' ]).has (goal)) return await this.invoke ('goal/m4.g');

if (new Set ([ 'convert-common.c.o', 'convert.c.o' ]).has (goal)) return await this.invoke ('convert.c.o.g');

if (env.ext (goal, 'o')) return await this.invoke ('goal/compile.g');
if (env.ext (goal, 'l')) return await this.invoke ('goal/local.g');
if (env.ext (goal, 'out')) return await this.invoke ('goal/tst/out.g');
if (env.exts (goal, [ 'c', 'S', 'h', 'ld', 'm4', 'g', 'sh' ])) return false;

return await this.invoke (`${goal}.g`);
