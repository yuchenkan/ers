'use strict'; /* vim: set ft=javascript: */

if (env.base (goal) === 'Goalfile') return false;

const subs = [ 'lib', 'common', 'live', 'replay', 'ers', 'int' ];
if (goal !== 'goal/subs.g' && await this.invoke ('goal/subs.g', { subs, dispatch: true })) return;

if (goal === 'all') return await this.invoke ('goal/subs.g', { subs });

const spec_m4 = /(.*)\b-specific\.[^.]*.m4$/;
if (goal.match (spec_m4)) {
  const leading = goal.match (spec_m4)[1];
  if (new Set ([ 'syscall', 'lock' ]).has (leading.match (/\b([a-z]*)$/)[1]))
    return await this.invoke (`${leading}-specific.m4.g`);
}

if (goal.match (/-offsets\.h$/)) return await this.invoke ('goal/offset.g');
if (goal.match (/-specific\.[^.]*$/)) return await this.invoke ('goal/m4.g');

if (new Set ([ 'public.h', 'public.h.in' ].map (s => `public/${s}`)).has (goal))
  return await this.invoke ('goal/m4.g');
if (env.base (goal) === 'rtld.c.o') return await this.invoke ('goal/rtld.g');

if (env.ext (goal, 'o')) return await this.invoke ('goal/compile.g');
if (env.ext (goal, 'l')) return await this.invoke ('goal/local.g');
if (env.ext (goal, 'out')) return await this.invoke ('goal/tst/out.g');
if (env.exts (goal, [ 'c', 'S', 'h', 'ld', 'm4', 'g', 'sh' ])) return false;

return await this.invoke (`${goal}.g`);
